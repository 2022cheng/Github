#include<iostream>
using namespace std;
#define MAXLEN 100//定义串的最大长度

typedef struct
{
	char vec[MAXLEN];
	int len;//串的实际长度
} Str;//可用Str来定义该类型的结构体变量

int LenStr(Str *r){

	int i=0;
	while(r->vec[i]!='\0'){
		i++;
	}

	return i;
}
Str *CreateStr(Str *r){
	gets(r->vec);
	r->len=LenStr(r);
	return r;
}

void ShowStr(Str *r){
	printf("\n\t\t该串值为: ");
	if(r->vec[0]=='\0'){
		printf("空串! \n");
	}else{
		puts(r->vec);//使用puts函数输出字符串,格式为 puts(字符串组名)
	}
}

void ConcatStr(Str *r1,Str *r2){
	int i;
	printf("\n\t\t r1=%s  r2=%s\n",r1->vec,r2->vec);
	if(r1->len+r2->len>MAXLEN){
		printf("两个串太长,溢出! ");//连接后的串长超过串的最大长度
	}else{
		for( i=0;i<r2->len;i++){
			r1->vec[r1->len+i]=r2->vec[i];//进行连接
		}
		r1->vec[r1->len+i]='\0';
		r1->len=r1->len+r2->len;//修改连接后的新串的长度
	}
	printf("\n\t\t r1=%s  r2=%s\n",r1->vec,r2->vec);

}

void SubStr(Str *r,Str *r1,int i ,int j){

	if(i+j-1>MAXLEN){
		printf("子串越界! ");
	}else{
		for(int k=0;k<j;k++){
			r1->vec[k]=r->vec[i+k-1];//从r中取出子串
		}

		r1->len=j;
		r1->vec[r1->len]='\0';
	}

	printf("\n\t\t 取出字符为r1=%s ",r1->vec);
}

int EqualStr(Str *r1,Str *r2){
	printf("\n\t\t r1=%s  r2=%s\n",r1->vec,r2->vec);
	int i=0;
	while(r1->vec[i]==r2->vec[i]&&r1->vec[i]!='\0'&&r2->vec[i]!='\0')
		i++;
	if(r1->vec[i]==r2->vec[i])
		return 0;
	else if(r1->vec[i]>r2->vec[i])
		return 1;
	else
		return -1;

}

Str *InsStr(Str *r,Str *r1,int i){
	printf("\n\t\t r=%s  r1=%s\n",r->vec,r1->vec);
	if(i>r->len||r->len+r1->len>MAXLEN){
		printf("不能插入!");
	}else{

		for(int k=r->len-1;k>=i;k--){
			r->vec[r1->len+k]=r->vec[k];//后移空出的位置
		}
		for(int k=0;k<r1->len;k++){
			r->vec[i+k]=r1->vec[k];//插入子串
		}
		r->len=r->len+r1->len;
		r->vec[r->len]='\0';
	}

	printf("\n\t\t 插入后的新串 r=%s \n",r->vec);
	return r;
}

void DelStr(Str *r,int i ,int j){

	if(i+j-1>r->len){
		printf("所要删除的字符串越界！");
	}else{
		for(int k=i+j;k<r->len;k++,i++){
			r->vec[i]=r->vec[k];//将后面的字符串前移覆盖
		}
		r->len=r->len-j;
		r->vec[r->len]='\0';
	}
	printf("\n\t\t 删除后的新串 r=%s \n",r->vec);

}

int IndexStr(Str *r,Str *r1){
	printf("\n\t\t r=%s  r1=%s\n",r->vec,r1->vec);
	int i,j,k;
	for(i=0;r->vec[i];i++){
		for(j=i,k=0;r->vec[j]==r1->vec[k];j++,k++){
			if(!r1->vec[k+1]){
				return i;
			}
			return -1;
		}
	}
}

int main()
{

	Str a,b,c,d;
	Str *r=&a,*r1;
	r->vec[0]='\0';
	char choice,p;
	int i,j, ch=1;
	while(ch!=0){
		printf("\n");
		printf("\n\t\t        串子系统                  *");
		printf("\n\t\t************************************");
		printf("\n\t\t*   1------输入字符串      *");
		printf("\n\t\t*   2------连接字符串      *");
		printf("\n\t\t*   3------取出子串      *");
		printf("\n\t\t*   4------删除子串      *");
		printf("\n\t\t*   5------插入子串      *");
		printf("\n\t\t*   6------查找子串      *");
		printf("\n\t\t*   7------比较串大小      *");
		printf("\n\t\t*   8------显示字符串      *");
		printf("\n\t\t*   0------返      回      *");
		printf("\n\t\t************************************");
		printf("\n\t\t请选择菜单号(0-8)：    *");
		scanf("%c",&choice);
		getchar();
		if(choice=='1'){
			printf("\n\t\t请输入一个字符串: ");
			gets(r->vec);//使用get函数输入字符串 格式为 gets(字符串组名)
			r->len=LenStr(r);
		}else if(choice=='2'){
			printf("\n\t\t请输入所要连接字符串: ");
			r1=CreateStr(&b);
			printf("\n\t\tr1为: ");
			puts(r1->vec);
			ConcatStr(r,r1);
			printf("\n\t\t连接后的新串值为: ");
			puts(r->vec);
			int n=LenStr(r);
			printf("新串长度为:%d",n);

		}else if(choice=='3'){
			printf("\n\t\t请输入从第几个字符开始: ");
			scanf("%d",&i);
			getchar();
			printf("\n\t\t请输入取出的连续字符数: ");
			scanf("%d",&j);
			getchar();
			SubStr(r,&a,i ,j);


		}else if(choice=='4'){
			printf("\n\t\t请输入从第几个字符开始: ");
			scanf("%d",&i);
			getchar();
			printf("\n\t\t请输入删除的连续字符数: ");
			scanf("%d",&j);
			getchar();
			DelStr(r,i ,j);


		}else if(choice=='5'){
			printf("\n\t\t请输入在第几个字符前插入: ");
			scanf("%d",&i);
			getchar();
			printf("\n\t\t请输入所要插入的字符串: ");
			r1=CreateStr(&b);
			Str *newStr=InsStr(r,r1,i-1);
			printf("\n\t\t新串值为: ");
			puts(newStr->vec);

		}else if(choice=='6'){
			printf("\n\t\t请输入所要查找的字符串: ");
			r1=CreateStr(&b);
			i=IndexStr(r,r1);
			if(i!=-1){
				printf("\n\t\t第一次出现的位置是第%d个.\n ",i+1);
			}else{
				printf("\n\t\t该子串不在其中!");
			}

		}else if(choice=='7'){
			printf("\n\t\t请输入第一个串: ");
			gets(c.vec);
			printf("\n\t\t请输入第二个串: ");
			gets(d.vec);
			int k=EqualStr(&c,&d);
			if(k>0){
				printf("\n\t\t第一个串大! \n");
			}else if(k<0){
				printf("\n\t\t第二个串大! \n");
			}else {
				printf("\n\t\t两个串一样大! \n");
			}

		}else if(choice=='8'){
			ShowStr(r);
			int n=LenStr(r);
			printf("串长度为:%d",n);
		}else if(choice=='0'){
			break;
		}else{
			printf("\n\t\t请注意:输入有误! \n");
			if(choice!='X'&&choice!='x'){
				printf("\n\t\t按回车键继续，按任意键返回主菜单 \n");
				p=getchar();
				if(p!='\xA'){

					getchar();
					break;
				}
			}
		}
	}

	return 0;
}

